package frame

import (
	"bytes"
	"fmt"
)

type PackageFrame struct {
	name     string   // package name
	filename string   // source file name, with path
	imports  []string // packages imported in this file
	*baseFrame
}

func NewPackageFrame(filename, packageName string, packageBegin, packageEnd int) *PackageFrame {
	packageFrame := &PackageFrame{
		name:      packageName,
		filename:  filename,
		imports:   make([]string, 0),
		baseFrame: NewBaseFrame(packageName),
	}
	packageFrame.SetPosLine(packageBegin, packageBegin, packageEnd)
	return packageFrame
}

func (frame *PackageFrame) Import(path string) {
	frame.imports = append(frame.imports, path)
}

func (frame *PackageFrame) GenBeginning(genEnv *baseEnv, content []byte) []byte {
	buf := bytes.NewBuffer(nil)
	buf.WriteString(fmt.Sprintf("//line %s:%d\n", frame.filename, 1)) // need reset filename
	buf.Write(content)
	if len(frame.InnerFrame) == 0 {
		return buf.Bytes()
	}
	// do some import work
	for _, pack := range frame.imports {
		if pack == SDKPackage {
			return buf.Bytes()
		}
	}
	buf.WriteRune('\n')
	buf.WriteString("import ")
	buf.WriteString(SDKPackage)
	buf.WriteRune('\n')
	buf.WriteString(fmt.Sprintf("//line %s:%d", frame.filename, 2)) // need reset line number
	return buf.Bytes()
}

func (frame *PackageFrame) GenEnding(genEnv *baseEnv, content []byte) []byte {
	buf := bytes.NewBuffer(nil)
	buf.Write(content)
	return buf.Bytes()
}

func (frame *PackageFrame) GenEnv(genEnv *baseEnv) []byte {
	buf := bytes.NewBuffer(nil)
	buf.WriteString("\n// code generated by gootprint\n")
	buf.WriteString(fmt.Sprintf("const %s = %s\n", genEnv.filenameConst, wrapString(frame.filename)))
	buf.WriteString(fmt.Sprintf("var _ = %s\n", genSDKFunCallWithArgs("RegisterFile", genEnv.filenameConst)))
	return buf.Bytes()
}

func (frame *PackageFrame) getEnv() *baseEnv {
	return NewBaseEnv(frame.filename)
}
